 事件
 7.1 事件种类
 7.1.1 鼠标事件
单一作用于某个事件

     // 点击事件
      mydiv.onclick=function(){
       alert('点击事件')
     }

      // 双击事件
      mydiv.ondblclick=function(){
         alert('双击事件');
      }

    //鼠标按下
    mydiv.onmousedown=function(){
       mydiv.innerHTML = '按下事件';
    }

    //鼠标抬起
    mydiv.onmouseup=function(){
       mydiv.innerHTML = '';
    }
    //鼠标移动
    //需要注意,只要鼠标移动就触发
    document.onmousemove = function(){
        console.log('移动了')
    }
    mydiv.onmousemove = function(){
        console.log('div移动了')
    }
    //鼠标移入
    //会触发冒泡(从内逐级向外依次触发)
   mydiv.onmouseover = function(){
        console.log('红')
    }
//    //会触发多次,取决于嵌套和鼠标位置
     box.onmouseover = function(){
        console.log('蓝')
    }

//     //鼠标移出
     mydiv.onmouseout = function(){
        console.log('离开红')
    }
//    //会触发多次,取决于嵌套和鼠标位置
     box.onmouseout  = function(){
       console.log('离开蓝')
    }


//方案二:移入移除事件

 mydiv.onmouseenter = function(){
       console.log('红')
   }
 // 不会触发多次
   box.onmouseenter= function(){
       console.log('蓝')
   }

   mydiv.onmouseleave = function(){
       console.log('离开红')
   }
// 不会触发多次
    box.onmouseleave  = function(){
       console.log('离开蓝')
   }

鼠标移入移除:
方案一: 会多次触发 (嵌套)
方案二: 不会触发多次


7.1.2  键盘事件
  键盘的按钮按下是会触发onkeydown事件,在函数中的e参数代表是哪一个事件触发的.
    
     document.onkeydown = function(e){
         alert('按下)
     }

  键盘的抬起会触发onkeyup事件,它与onkeydown用法一样.
      
        document.onkeyup = function(e){
         alert('抬起)
     }

7.2  Event事件对象
7.2.1 event事件对象代表事件的状态, 比如事件在其中发生的元素,键盘的按钮状态,鼠标的位置.
鼠标按钮的状态等等.

7.2.2  Event事件对象产生的事件
当用户单击某个元素的时候,我们给这个元素注册的事件就会触发,该事件的本质就是一个函数,
而该函数的形参接收一个event对象.事件通常与函数结合使用，函数不会在事件发生前被执行！

7.2.3  Event事件对象接收方式
  通过事件触发式的函数,以参数的形式传递进该函数内,不靠用调用传参,
  也就是说event对象是时间触发是调用函数的第一个参数    
   
      //事件触发时       调用函数(event)
    document.onclick = function(e){
       console.log(e)
     
    }

7.2.4  event 对象常用属性

鼠标的坐标值:
     document.onclick = function(e){
       console.log(e.clientX)
       console.log(e.clientY)

键盘的值:

   e.keyCode 


 7.2.5 event的兼容性

   event对象根据不同浏览器它的获取是不同方法,以下是针对获取event
      对象的兼容性写法.

    //事件触发时         调用的函数(event)
	document.onclick = function(e){
				//非ie  低版本ie
				var ev=e || window.event;
				console.log(ev.clientX);
			}
7.3  对象事件
7.3.1  页面加载完成后执行
  window.onload 是等待页面加载完成之后执行函数的内容,
  当然函数没有重载也就是说window.onload只能写一次

   
        //页面加载完成之后执行函数内的代码段
        window.onload = function(){
    var mydiv = document.getElementById('mydiv')
    mydiv.onclick = function(){
        alert('1')
    }
}
   
7.3.2  窗口变化大小时
  window.onresize是可以监听到窗口大小的变化,只要发生变化就会触发该事件.

       	window.onresize=function(){
               alert(1)
           }

7.4  表单事件
7.4.1 获取焦点

     in1.onfocus = function(){
     in1.style.backgroundColor = 'blue';
        }

7.4.2 失去焦点

      in1.onblur = function(){
      in1.style.backgroundColor= 'red';
         }
   
7.4.3  用户输入触发

	   in1.onchange = function(){
				in1.style.backgroundColor = 'blue'
			}
  
7.4.4  内容改变时触发
    
    in1.oninput = function(){
				in1.style.backgroundColor = 'red'
			}

7.5  事件绑定  事件监听  事件委托

7.5.1 事件绑定
希望运用js让用户操作dom元素,先要让dom元素处理一个事件函数.将这个函数绑定在该dom元素上.

7.5.2 事件绑定的方法
事件绑定的方法可以有标签内和js脚本内的方法.

       <button id="btn1" onclick="a()">按钮1</button>
    <button id="btn2">按钮2</button>

    <script>
    var btn1 = document.getElementById('btn1')
    var btn2 = document.getElementById('btn2')
    
    function a(){
        alert('按钮1')
    }
    btn2.onclick = function(){
       alert('按钮2')

    }

7.5.3  事件解除绑定的方法
    
     <button id="btn2">按钮2</button>
    <script>
  
    var btn2 = document.getElementById('btn2')
    btn2.onclick = function(){
       alert('按钮2')
    }
    //解除绑定
    btn2.onclick = null;
    </script>

7.6  事件监听
7.6.1 事件监听的方法

事件监听是对某些对象事件触发的监听,需要增加监听器 该方法有三个参数
(监听的事件,方法,冒泡),冒泡默认false
监听事件不用加on.但监听事件有兼容性问题,IE的监听需要attachEvent('onclick',c)
第一个参数为监听的事件,需要加on,第二个参数是是触发的事件函数

        var btn1 = document.getElementById('btn1')
      var btn2 = document.getElementById('btn2')
     //  增加监听事件        监听事件 方法  冒泡
       //btn2.addEventListener('click',a,false);

       btn1.addEventListener('mousedown',a,false)
       btn2.addEventListener('mousedown',a,false)
       btn1.addEventListener('mouseup',b,false)
       btn2.addEventListener('mouseup',c,false)

       function a(){
           alert('鼠标按下')
       }
       function b(){
        alert('鼠标抬起1')   
       }
       function c(){
        alert('鼠标抬起2')   
       }
       //ie监听
       btn1.attachEvent('onclick',c)
    </script>
   
7.6.2  监听的解绑和封装
因为考虑到浏览器不同,所以需要我们封装不同的监听器,来适应不同的浏览器
   
   var mydiv =document.getElementById('mydiv')
                  //封装监听
        function addE(target,type,fn){
            if(target,addEventListener){
                target.addEventListener(type,fn);
            }else {
                target.attachEvent('on'+type,'fn');
            }
        }
        addE(mydiv,'click',a);

        //封装解绑
        function removeE(target,type,fn){
            if(target,removeEventListener){
                target.removeEventListener(type,fn);
            }else {
                target.datachEvent('on'+type,'fn');
            }
        }


7.7  事件冒泡和事件委托































